---
# Clean up existing deployment
- name: Stop and remove existing WordPress containers
  become: yes
  shell: cd /opt/wordpress && docker-compose down -v --remove-orphans
  ignore_errors: yes

- name: Remove existing WordPress directory
  become: yes
  file:
    path: /opt/wordpress
    state: absent

- name: Remove WordPress Docker volumes
  become: yes
  shell: docker volume rm $(docker volume ls -q | grep wordpress) 2>/dev/null || true
  ignore_errors: yes

- name: Remove unused Docker volumes
  become: yes
  shell: docker volume prune -f
  ignore_errors: yes

#Create application directory
- name: Create WordPress application directory
  become: yes
  file:
    path: /opt/wordpress
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

# Copy Docker Compose files
- name: Copy Docker Compose file
  become: yes
  copy:
    src: docker-compose.yml
    dest: /opt/wordpress/docker-compose.yml
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'

- name: Copy environment file
  become: yes
  copy:
    src: .env
    dest: /opt/wordpress/.env
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0600'

# Generate random secrets
- name: Generate random WordPress database password
  set_fact:
    wordpress_db_password: "{{ lookup('password', '/dev/null', length=16, chars='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') }}"

- name: Generate random MySQL user password
  set_fact:
    mysql_user_password: "{{ lookup('password', '/dev/null', length=16, chars='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') }}"

- name: Generate random MySQL root password
  set_fact:
    mysql_root_password: "{{ lookup('password', '/dev/null', length=16, chars='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') }}"

- name: Generate random WordPress admin password
  set_fact:
    wordpress_admin_password: "{{ lookup('password', '/dev/null', length=16, chars='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+') }}"

# Update environment file with generated passwords
- name: Update environment file with WordPress DB password
  become: yes
  lineinfile:
    path: /opt/wordpress/.env
    regexp: '^WORDPRESS_DB_PASSWORD='
    line: "WORDPRESS_DB_PASSWORD={{ wordpress_db_password }}"

- name: Update environment file with MySQL user password
  become: yes
  lineinfile:
    path: /opt/wordpress/.env
    regexp: '^MYSQL_PASSWORD='
    line: "MYSQL_PASSWORD={{ mysql_user_password }}"

- name: Update environment file with MySQL root password
  become: yes
  lineinfile:
    path: /opt/wordpress/.env
    regexp: '^MYSQL_ROOT_PASSWORD='
    line: "MYSQL_ROOT_PASSWORD={{ mysql_root_password }}"

- name: Update environment file with WordPress admin password
  become: yes
  lineinfile:
    path: /opt/wordpress/.env
    regexp: '^WP_ADMIN_PASSWORD='
    line: "WP_ADMIN_PASSWORD={{ wordpress_admin_password }}"

# Deploy WordPress with Docker Compose
- name: Stop existing WordPress containers
  become: yes
  shell: cd /opt/wordpress && docker-compose down
  ignore_errors: yes

- name: Start WordPress with Docker Compose
  become: yes
  shell: cd /opt/wordpress && docker-compose up -d

- name: Set permissions for /opt/www directory
  become: yes
  file:
    path: /opt/www
    state: directory
    owner: www-data
    group: www-data
    mode: '0755'
    recurse: yes
  ignore_errors: yes

- name: Get WordPress container name
  become: yes
  shell: docker ps --filter "name=wordperss" --format "{{ '{{' }}.Names{{ '}}' }}" | head -1
  register: wp_container_name
  ignore_errors: yes

- name: Wait for WordPress to be ready
  become: yes
  shell: |
    timeout 120 bash -c 'until docker exec {{ wp_container_name.stdout }} wp core is-installed --path=/var/www/html --allow-root 2>/dev/null; do sleep 5; done'
  when: site_domain is defined and site_domain | length > 0 and wp_container_name is succeeded and wp_container_name.stdout != ""
  ignore_errors: yes

- name: Update WordPress site and admin URLs to use provided domain with HTTPS
  become: yes
  shell: |
    docker exec {{ wp_container_name.stdout }} wp option update siteurl "https://{{ site_domain }}" --path=/var/www/html --allow-root
    docker exec {{ wp_container_name.stdout }} wp option update home "https://{{ site_domain }}" --path=/var/www/html --allow-root
  when: site_domain is defined and site_domain | length > 0 and wp_container_name is succeeded and wp_container_name.stdout != ""
  ignore_errors: yes

# Display WordPress access information
- name: Extract WordPress credentials from .env
  become: yes
  shell: |
    grep -E "^(SITE_DOMAIN|WP_ADMIN_USER|WP_ADMIN_PASSWORD|WORDPRESS_DB_PASSWORD|MYSQL_PASSWORD|MYSQL_ROOT_PASSWORD)=" /opt/wordpress/.env
  register: env_values
  changed_when: false

- name: Convert env values to dictionary
  set_fact:
    wp_env: "{{ dict(env_values.stdout_lines | map('split', '=', 1)) }}"

- name: Display WordPress access information
  debug:
    msg:
      - "✅ WordPress has been deployed successfully!"
      - "🌐 WordPress URL: https://{{ wp_env.SITE_DOMAIN | default(site_domain | default('localhost')) }}"
      - "👤 WordPress Admin User: {{ wp_env.WP_ADMIN_USER | default('admin') }}"
      - "🔑 WordPress Admin Password: {{ wp_env.WP_ADMIN_PASSWORD | default('changeme') }}"
      - "🔑 WordPress DB Password: {{ wp_env.WORDPRESS_DB_PASSWORD | default('changeme') }}"
      - "🔑 MySQL User Password: {{ wp_env.MYSQL_PASSWORD | default('changeme') }}"
      - "🔑 MySQL Root Password: {{ wp_env.MYSQL_ROOT_PASSWORD | default('changeme') }}"
